{"version":3,"sources":["Selector.js","scripts/Tutorial.js","scripts/Utilities.js","xtra_scripts/BlockCreator.js","xtra_scripts/BlockDeleter.js","scripts/Blocks.js","xtra_scripts/SvgClass.js","scripts/Classes.js","xtra_scripts/GenColors.js","xtra_scripts/SvgSchedule.js","xtra_scripts/GenClasses.js","xtra_scripts/DispSelectors.js","scripts/Generate.js","App.js","index.js"],"names":["Selector","text","onClick","className","toUpperCase","Tutorial","href","startHours","endHours","weekDays","getDay","day","start","end","getClasses","data","Object","keys","localStorage","forEach","JSON","parse","getItem","mapJson","json","callback","v","map","loopJson","console","log","sizeJson","length","BlockCreator","useState","blockClass","setClass","blockGroup","setGroup","blockDay","setDay","blockStart","setStart","blockEnd","setEnd","type","placeholder","value","onChange","evt","target","list","id","option","index","maxLength","wd","sH","eH","course","trim","window","confirm","groupName","block","currentGroups","currentBlocks","push","setItem","stringify","saveClasses","alert","BlockDeleter","classes","setClasses","deleteBlock","Day","Start","End","splice","removeItem","deleteClasses","classIndex","groupIndex","blockIndex","Blocks","creating","isCreating","SvgClass","blocks","width","height","viewBox","preserveAspectRatio","patternUnits","d","fill","strokeWidth","x","y","fontSize","dominantBaseline","textAnchor","Array","from","parseInt","Classes","classesData","classesNames","setName","classGroup","changeGroups","groupsNames","useEffect","name","getHex","val","toString","counter","jgroups","jlists","SvgSchedule","schedules","setIndex","findColor","key","p","R","G","B","Math","floor","getColor","setSchedule","index_","courseName","style","color","stroke","index1","index2","DispGroups","states","setState","checked","DispClasses","generateSchedules","selecting","selectedGroups","groups","prepareSchedules","checkGroups","loopGroups","classNames","i","igroup","schedule","checkBlocks","block1","startHour1","endHour1","block2","Generate","isSelecting","groupData","getSelectors","setStates","sessionStorage","setSchedules","textAlign","states_","schedules_","saveSchedule","App","tab","setTab","innerWidth","setWidth","selectors","doResize","addEventListener","removeEventListener","selector","html","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66813e2b.chunk.js","sourcesContent":["const Selector = ({ text, onClick }) => {\r\n    return (\r\n        <div className=\"selector-option\" onClick={() => onClick && onClick()}>\r\n            <h4>{text.toUpperCase()}</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Selector;","const Tutorial = () => {\r\n    return (\r\n      <>\r\n        <h1>Tutorial</h1>\r\n        <div className=\"tutorial-block\">\r\n          <p>Bienvenido a \"Schedule App\", una simple página para generar horarios creada por el usuario <a href=\"https://github.com/JGQH\">@JGQH</a></p>\r\n        </div>\r\n        <div className=\"tutorial-block\">\r\n          <h3>¿Cómo funciona?</h3>\r\n          <p>La aplicación funciona recorriendo todas las posibilidades de combinaciones de los diferentes <i>bloques</i> de cada curso.</p>\r\n          <p>¿Qué es un bloque? Los bloques son las diferentes partes que componen un horario. Por ejemplo, un bloque podría ser \"07:00 - 08:40\". En otras palabras, un bloque representa cada lapso de tiempo en el que se debe considerar que el usuario está en clases. Por regla general, los bloques no pueden cruzarse unos con otros, por lo que se debe tomar esto en cuenta si no se genera ningún horario final.</p>\r\n          <p>Los bloques (Y el curso al que pertenece) los debe generar en el apartado <i>\"Crear Bloques\"</i>.</p>\r\n        </div>\r\n        <div className=\"tutorial-block\">\r\n          <h3>¿Para qué sirve separarlos por curso?</h3>\r\n          <p>Como en un horario normal, cada curso está asociado a uno o más bloques, por lo que cambiar el curso elegido durante el programa cambia la lista de bloques que se deben de considerar para crear los horarios.</p>\r\n          <p>Los cursos agregados (Y sus bloques correspondientes) se visualizan en el apartado <i>\"Visualizar Cursos\"</i>.</p>\r\n        </div>\r\n        <div className=\"tutorial-block\">\r\n          <h3>¿Qué hace luego de recorrer todas las posibilidades?</h3>\r\n          <p>Luego de hacer eso (Sin contar todas las posibilidades que tienen algún bloque se cruzándose con otro), se devuelve la lista de horarios generados. Los horarios se presentan uno por uno mediante un selector, mostrando una gráfica del horario actual.</p>\r\n          <p>La selección de cursos a considerar, además de la visualización de resultados, se realiza en el apartado <i>\"Horarios Generados\"</i></p>\r\n        </div>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Tutorial;","export const startHours = [\r\n    \"07:00\", \"07:50\", \"08:50\", \"09:40\", \"10:40\", \"11:30\", \"12:20\", \"13:10\", \"14:00\", \"14:50\", \"15:50\", \"16:40\", \"17:40\", \"18:30\", \"19:20\", \"20:10\"\r\n];\r\n\r\nexport const endHours = [\r\n    \"07:50\", \"08:40\", \"09:40\", \"10:30\", \"11:30\", \"12:20\", \"13:10\", \"14:00\", \"14:50\", \"15:40\", \"16:40\", \"17:30\", \"18:30\", \"19:20\", \"20:10\", \"21:00\"\r\n];\r\n\r\nexport const weekDays = [\r\n    \"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\"\r\n];\r\n\r\nexport function getDay(day, start, end) {\r\n    return `${weekDays[day]}, ${startHours[start]} - ${endHours[end]}`;\r\n}\r\n\r\nexport function getClasses() {\r\n    const data = {};\r\n    Object.keys(localStorage).forEach(className => {\r\n        data[className] = JSON.parse(localStorage.getItem(className));\r\n    });\r\n    return data;\r\n}\r\n\r\nexport function saveClasses(className, groupName, block) {\r\n    const currentGroups = JSON.parse(localStorage.getItem(className) || \"{}\");\r\n    const currentBlocks = currentGroups[groupName] || [];\r\n    currentBlocks.push(block)\r\n    currentGroups[groupName] = currentBlocks;\r\n\r\n    localStorage.setItem(className, JSON.stringify(currentGroups));\r\n}\r\n\r\nexport function deleteClasses(className, groupName, index) {\r\n    const currentGroups = JSON.parse(localStorage.getItem(className));\r\n    const currentBlocks = currentGroups[groupName];\r\n\r\n    currentBlocks.splice(index, 1);\r\n    console.log(currentBlocks);\r\n\r\n    if(currentBlocks.length == 0){\r\n        delete currentGroups[groupName];\r\n        console.log(currentGroups);\r\n\r\n        if(sizeJson(currentGroups) == 0) {\r\n            localStorage.removeItem(className);\r\n        }else{\r\n            localStorage.setItem(className, JSON.stringify(currentGroups));\r\n        }\r\n    }else{\r\n        currentGroups[groupName] = currentBlocks\r\n        localStorage.setItem(className, JSON.stringify(currentGroups));\r\n    }\r\n}\r\n\r\nexport function getSelectors() {\r\n    const data = {};\r\n    Object.keys(localStorage).forEach(className => {\r\n        const groups = JSON.parse(localStorage.getItem(className));\r\n\r\n        const groupData = {};\r\n        Object.keys(groups).forEach(groupName => {\r\n            groupData[groupName] = true;\r\n        })\r\n        data[className] = groupData;\r\n    })\r\n    return data;\r\n}\r\n\r\nexport function getSchedules() {\r\n    return JSON.parse(sessionStorage.getItem(\"schedules\")) || [];\r\n}\r\n\r\nexport function saveSchedule(schedules) {\r\n    sessionStorage.setItem(\"schedules\", JSON.stringify(schedules));\r\n}\r\n\r\nexport function mapJson(json = {}, callback = (v => v)) {\r\n    return Object.keys(json).map(callback);\r\n}\r\n\r\nexport function loopJson(json = {}, callback = (v => console.log(v))) {\r\n    Object.keys(json).forEach(callback);\r\n}\r\n\r\nexport function sizeJson(json = {}) {\r\n    return Object.keys(json).length;\r\n}","import { startHours, endHours, weekDays, getDay, saveClasses, mapJson } from '../scripts/Utilities';\r\nimport { useState } from 'react';\r\n\r\nconst BlockCreator = () => {\r\n    const [blockClass, setClass] = useState(\"\");\r\n    const [blockGroup, setGroup] = useState(\"\");\r\n    const [blockDay, setDay] = useState(0);\r\n    const [blockStart, setStart] = useState(0);\r\n    const [blockEnd, setEnd] = useState(0);\r\n\r\n    function uploadBlock() {\r\n        const course = `${blockClass} [${blockGroup}] (${getDay(blockDay, blockStart, blockEnd)})`;\r\n\r\n        if(blockClass.trim().length > 0 && blockGroup.trim().length > 0) {\r\n            if(window.confirm(`¿Seguro que desea guardar este bloque del curso ${course})?`)){\r\n                const block = {\r\n                \"Day\":blockDay,\r\n                \"Start\":blockStart,\r\n                \"End\":blockEnd\r\n                };\r\n\r\n                saveClasses(blockClass, blockGroup, block)\r\n                alert(\"¡Bloque agregado satisfactoriamente!\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"blocks-form\">\r\n            <div className=\"blocks-input\">\r\n                <div>\r\n                    <label>Clase:</label>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" placeholder=\"Exm: Cálculo\" value={blockClass} onChange={evt => setClass(evt.target.value)} list=\"blocks-list\"/>\r\n                    <datalist id=\"blocks-list\">\r\n                    {mapJson(localStorage, (option, index) => {\r\n                        return <option key={index}>{option}</option>\r\n                    })}\r\n                    </datalist>\r\n                </div>\r\n            </div>\r\n            <div className=\"blocks-input\">\r\n                <div>\r\n                    <label>Grupo:</label>\r\n                </div>\r\n                <div>\r\n                    <input type=\"text\" placeholder=\"Exm: A\" value={blockGroup} onChange={evt => setGroup(evt.target.value)} maxLength={1}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"blocks-input\">\r\n                <div>\r\n                    <label>Día de la semana:</label>\r\n                </div>\r\n                <div>\r\n                    <select onChange={evt => setDay(evt.target.value)}>\r\n                    {weekDays.map((wd, index) => {\r\n                        return <option key={index} value={index}>{wd}</option>\r\n                    })}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"blocks-input\">\r\n                <div>\r\n                    <label>Inicio del bloque:</label>\r\n                </div>\r\n                <div>\r\n                    <select onChange={evt => setStart(evt.target.value)}>\r\n                    {startHours.map((sH, index) => {\r\n                        return <option key={index} value={index}>{sH}</option>\r\n                    })}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"blocks-input\">\r\n                <div>\r\n                    <label>Final del bloque:</label>\r\n                </div>\r\n                <div>\r\n                    <select onChange={evt => setEnd(evt.target.value)}>\r\n                    {endHours.map((eH, index) => {\r\n                        return <option key={index} value={index}>{eH}</option>\r\n                    })}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <button className=\"blocks-submit\" onClick={uploadBlock}>Guardar bloque</button>\r\n        </div>)\r\n}\r\n\r\nexport default BlockCreator;","import { getDay, getClasses, deleteClasses, mapJson } from '../scripts/Utilities';\r\nimport { useState } from 'react';\r\n\r\nconst BlockDeleter = () => {\r\n    const [classes, setClasses] = useState(getClasses());\r\n\r\n    function deleteBlock(className, groupName, index) {\r\n        const block = classes[className][groupName][index];\r\n        const course = `${className} [${groupName}] (${getDay(block.Day, block.Start, block.End)})`;\r\n        if(window.confirm(`¿Eliminar bloque de ${course}?`)){\r\n            deleteClasses(className, groupName, index);\r\n\r\n            setClasses(getClasses())\r\n\r\n            alert(\"¡Bloque eliminado satisfactoriamente!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div className=\"blocks-manager\">\r\n        {mapJson(classes, (className, classIndex) => (\r\n            <div key={classIndex} className=\"class-holder\">\r\n                <h1>{className}</h1>\r\n                {mapJson(classes[className], (groupName, groupIndex) => (\r\n                    <div key={groupIndex} className=\"group-holder\">\r\n                        <h3>{groupName}</h3>\r\n                        {classes[className][groupName].map((block, blockIndex) => (\r\n                            <p key={blockIndex} className=\"block-holder\" onClick={() => deleteBlock(className, groupName, blockIndex)}>\r\n                                {getDay(block.Day, block.Start, block.End)}\r\n                            </p>)\r\n                        )}\r\n                    </div>)\r\n                )}\r\n            </div>)\r\n        )}\r\n    </div>)\r\n}\r\n\r\nexport default BlockDeleter;","import BlockCreator from '../xtra_scripts/BlockCreator';\r\nimport BlockDeleter from '../xtra_scripts/BlockDeleter';\r\nimport { useState } from 'react';\r\n\r\nconst Blocks = () => {\r\n  const [creating, isCreating] = useState(true);\r\n\r\n  return (\r\n    <>\r\n      <h1>{creating ? \"Crear Bloques\" : \"Eliminar Bloques\"}</h1>\r\n      <div className=\"blocks-container-selector\">\r\n        <div className=\"blocks-selector\">\r\n          <button onClick={() => isCreating(true)}>Crear Bloques</button>\r\n        </div>\r\n        <div className=\"blocks-selector\">\r\n          <button onClick={() => isCreating(false)}>Eliminar Bloques</button>\r\n        </div>\r\n      </div>\r\n      {creating ?\r\n        <BlockCreator />\r\n      :\r\n        <BlockDeleter />\r\n      }\r\n      \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Blocks","import { startHours, endHours, weekDays } from '../scripts/Utilities';\r\n\r\nconst SvgClass = ({blocks = []}) => {\r\n    return (\r\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 600 544\" preserveAspectRatio=\"xMaxYMax\">\r\n            <pattern id=\"grid\" width=\"100\" height=\"32\" patternUnits=\"userSpaceOnUse\">\r\n                <path d=\"M 0 0 L 100 0 L 100 32 L 0 32 Z\" fill=\"none\" strokeWidth=\"0.25\"/>\r\n            </pattern>\r\n            <rect width=\"600\" height=\"544\" fill=\"url(#grid)\" />\r\n            <text>\r\n                {weekDays.map((text, index) => {\r\n                    return <tspan\r\n                            key={index}\r\n                            x={100 * index + 150}\r\n                            y=\"16\"\r\n                            fontSize={24}\r\n                            dominantBaseline=\"middle\"\r\n                            textAnchor=\"middle\">{text}</tspan>\r\n                })}\r\n            </text>\r\n            <text>\r\n                {Array.from(Array(16), (v, index) => {\r\n                    return <tspan\r\n                            key={index}\r\n                            x=\"50\"\r\n                            y={32 * index + 48}\r\n                            dominantBaseline=\"middle\"\r\n                            textAnchor=\"middle\">{startHours[index]}-{endHours[index]}</tspan>\r\n                })}\r\n            </text>\r\n            \r\n            {blocks.map((block, index) => {\r\n                const day = parseInt(block.Day) + 1;\r\n                const start = parseInt(block.Start);\r\n                const end = parseInt(block.End);\r\n\r\n                return <rect\r\n                        key={index}\r\n                        className=\"class-block\"\r\n                        x={day * 100}\r\n                        y={(start + 1) * 32}\r\n                        width={100}\r\n                        height={32 * (end - start + 1)}></rect>\r\n            })}\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default SvgClass;","import { getClasses, mapJson } from './Utilities';\r\nimport { useEffect, useState } from 'react';\r\nimport SvgClass from '../xtra_scripts/SvgClass'\r\n\r\nconst Classes = () => {\r\n  const classesData = getClasses()\r\n  const classesNames = Object.keys(classesData);\r\n  const [className, setName] = useState(classesNames[0] || \"\");\r\n  const [classGroup, setGroup] = useState(\"\");\r\n\r\n  function changeGroups(index){\r\n    let groupsNames = Object.keys(classesData[className] || {});\r\n    setGroup(groupsNames[index]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    changeGroups(0);\r\n  }, [className])\r\n\r\n  function changeName(evt){\r\n    const index = evt.target.value;\r\n    setName(classesNames[index]);\r\n  }\r\n\r\n  return (\r\n    (classesNames.length == 0) ?\r\n    <h1>No se ha ingresado ninguna clase</h1>\r\n    :\r\n    <>\r\n      <h1>Clases</h1>\r\n      <div className=\"classes-container-selector\">\r\n        <div className=\"classes-selector\">\r\n          <select onChange={changeName}>\r\n            {classesNames.map((name, index) => {\r\n              return <option key={index} value={index}>{name}</option>\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div className=\"classes-selector\">\r\n          <select onChange={evt => changeGroups(evt.target.value)}>\r\n            {mapJson(classesData[className], (name, index) => (\r\n                <option key={index} value={index}>{name}</option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"classes-container-visual\">\r\n        <SvgClass blocks={classesData[className][classGroup]} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Classes;","function getHex(val){\r\n    if(val < 16){\r\n        return \"0\" + val.toString(16);\r\n    }\r\n    return val.toString(16);\r\n}\r\n\r\nfunction getColor(p){\r\n    let [R, G, B] = [0, 0, 0];\r\n    if(p < 1){ //Red to Green\r\n        G = Math.floor(255 * p);\r\n        R = 255 - G;\r\n    }else if(p < 2){ //Green to Blue\r\n        B = Math.floor(255 * (p - 1));\r\n        G = 255 - B;\r\n    }else{ //Blue to Red\r\n        R = Math.floor(255 * (p - 2));\r\n        B = 255 - R;\r\n    }\r\n    return `#${getHex(R)}${getHex(G)}${getHex(B)}`;\r\n}\r\n\r\nexport { getColor };","import { mapJson, sizeJson } from '../scripts/Utilities';\r\nimport { startHours, endHours, weekDays } from '../scripts/Utilities';\r\nimport { useState, useEffect } from 'react';\r\nimport { getColor } from './GenColors';\r\n\r\nconst SvgSchedule = ({schedules = []}) => {\r\n    const [index, setIndex] = useState(0);\r\n\r\n    function findColor(key) {\r\n        const p = 3 * (key / sizeJson(schedules[index]));\r\n        return getColor(p);\r\n    }\r\n\r\n    function setSchedule(index_){\r\n        if((index_ == -1) || (index_ == schedules.length)) return;\r\n\r\n        setIndex(index_)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIndex(0);\r\n    }, [schedules]);\r\n\r\n    return (\r\n    <>\r\n        <div className=\"schedule-courses\">\r\n            <h3 >Horario {index + 1}/{schedules.length}</h3>\r\n            {mapJson(schedules[index], (courseName, key) => {\r\n                return <p key={key} style={{color:findColor(key)}}>{courseName}</p>\r\n            })}\r\n        </div>\r\n        <div className=\"schedule-graph\">\r\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 600 544\" preserveAspectRatio=\"xMaxYMax\">\r\n                <pattern id=\"grid\" width=\"100\" height=\"32\" patternUnits=\"userSpaceOnUse\">\r\n                    <path d=\"M 0 0 L 100 0 L 100 32 L 0 32 Z\" fill=\"#ffffff\" strokeWidth=\"0.25\" stroke=\"#000000\"/>\r\n                </pattern>\r\n                <rect width=\"600\" height=\"544\" fill=\"url(#grid)\" />\r\n                <text>\r\n                    {weekDays.map((text, index) => {\r\n                        return <tspan\r\n                                key={index}\r\n                                x={100 * index + 150}\r\n                                y=\"16\"\r\n                                fontSize={24}\r\n                                dominantBaseline=\"middle\"\r\n                                textAnchor=\"middle\">{text}</tspan>\r\n                    })}\r\n                </text>\r\n                <text>\r\n                    {Array.from(Array(16), (v, index) => {\r\n                        return <tspan\r\n                                key={index}\r\n                                x=\"50\"\r\n                                y={32 * index + 48}\r\n                                dominantBaseline=\"middle\"\r\n                                textAnchor=\"middle\">{startHours[index]}-{endHours[index]}</tspan>\r\n                    })}\r\n                </text>\r\n                {mapJson(schedules[index], (courseName, index1) => {\r\n                    const blocks = schedules[index][courseName]\r\n                    return <g key={index1}>\r\n                        {blocks.map((block, index2) => {\r\n                            const day = parseInt(block.Day) + 1;\r\n                            const start = parseInt(block.Start);\r\n                            const end = parseInt(block.End);\r\n                            return <rect\r\n                                    key={index2}\r\n                                    x={day * 100}\r\n                                    y={(start + 1) * 32}\r\n                                    width={100}\r\n                                    height={32 * (end - start + 1)}\r\n                                    fill={findColor(index1)}></rect>\r\n                        })}\r\n                    </g>\r\n                })}\r\n            </svg>\r\n        </div>\r\n        <div className=\"schedule-arrow-prev\" onClick={() => setSchedule(index - 1)}></div>\r\n        <div className=\"schedule-arrow-next\" onClick={() => setSchedule(index + 1)}></div>\r\n    </>)\r\n}\r\n\r\nexport default SvgSchedule;","import { getClasses, loopJson, sizeJson } from '../scripts/Utilities'\r\n\r\n/* NOTE: This algorithm is basically brute force, so it will check all the possibilities, which can result in a slow \"creation\" time (Also, not precisely optimized) */\r\n\r\nlet data, counter, jgroups, jlists;\r\n/*\r\n    ~data {json}: Contains all blocks that were selected\r\n    ~counter {number}: Amount of possibilities that the algorithm will go through, used to determine when to stop the loop\r\n    ~jgroups {json}: Contains the \"group index\" of each class, which allows us to easily loop through each group of every class\r\n    ~jlists {list}: Contains all the combination of courses (classes + group) that are valid\r\n*/\r\nfunction generateSchedules(selecting) {\r\n    if(prepareSchedules(selecting)) return []; //Exits if no block was selected\r\n    setGeneral();\r\n    \r\n    do {\r\n        checkGroups()\r\n    } while(loopGroups())\r\n\r\n    return jlists;\r\n}\r\n\r\n/**\r\n * Sets the blocks of each class that was selected\r\n * @param {{}} selecting The json of classes that are selected or not\r\n */\r\nfunction prepareSchedules(selecting) {\r\n    const classes = getClasses();\r\n    data = {};\r\n    loopJson(selecting, className => { //Checking every class\r\n        const selectedGroups = {};\r\n        const groups = selecting[className]\r\n        loopJson(groups, groupName => { //From each class, we get it's groups\r\n            if(groups[groupName]) { //If a group is selected, save the blocks it has\r\n                selectedGroups[groupName] = classes[className][groupName];\r\n            }\r\n        })\r\n\r\n        if(sizeJson(selectedGroups) > 0) { //If no groups were selected, it is not added to the data\r\n            data[className] = selectedGroups\r\n        }\r\n    });\r\n\r\n    return sizeJson(data) == 0;\r\n}\r\n\r\n/**\r\n * Sets initial values to the holder of groups and the counter\r\n */\r\nfunction setGeneral(){\r\n    jlists = [];\r\n    jgroups = {};\r\n    counter = 1;\r\n\r\n    loopJson(data, className => {\r\n        jgroups[className] = 0;\r\n        counter *= sizeJson(data[className]);\r\n    })\r\n}\r\n\r\n/**\r\n * Switches the current groups of the classes for a new combination\r\n * @returns {boolean} Returns false if all the combinations have already been checked. Otherwise, returns true.\r\n */\r\nfunction loopGroups() {\r\n    if(counter == 1) return false; //If all combinations have been checked, don't continue\r\n\r\n    const classNames = Object.keys(jgroups)\r\n    for(let i = 0; i < classNames.length; i++){\r\n        const className = classNames[i]\r\n        const igroup = jgroups[className] + 1; //From every class, we add 1 to the current \"index\" of the group\r\n\r\n        if(igroup == Object.keys(data[className]).length){  //If we reached the limit, it goes back to 0\r\n            jgroups[className] = 0;\r\n        }else{  //If not, just saves the current group and exits the for cycle\r\n            jgroups[className] = igroup;\r\n            break;\r\n        }\r\n\r\n        /* NOTE: The reason it only breaks when not going back to 0 is that, if this group reached the limit, then the next group has to go trough this same process. Therefore, this repetition should only break if the \"group index\" hasn't reached it's limit */\r\n    }\r\n\r\n    counter--; //One more combination checked\r\n    return true;\r\n}\r\n\r\n/**\r\n * Checks if the current group combination is valid\r\n */\r\nfunction checkGroups() {\r\n    const schedule = [[], [], [], [], []]; //Just a holder to check if the blocks are valid through the days\r\n    const classes = {}; //Holder for which course (class + group) will be saved with it's blocks\r\n\r\n    //STEP 1: Getting which groups to evaluate based on jgroups (Combination of current groups)\r\n    loopJson(data, className => {\r\n        const groupNames = Object.keys(data[className]);\r\n        const groupName = groupNames[jgroups[className]]; //groupNames[igroup] from loopGroups\r\n\r\n        const courseName = `${className} [${groupName}]`;\r\n        classes[courseName] = data[className][groupName]; //Saving group blocks under course name\r\n    });\r\n\r\n    //STEP 2: Check if none of the blocks intersect\r\n    for (const courseName in classes) {\r\n        const blocks = classes[courseName];\r\n        for(let i = 0; i < blocks.length; i++){\r\n            const block = blocks[i];\r\n            const dayBlocks = schedule[block.Day];\r\n\r\n            if(!checkBlocks(dayBlocks, block)) return;\r\n        }\r\n    }\r\n\r\n    //STEP 3: If we reached this point, it means all blocks of current group combination are valid. Therefore, it has to be stored\r\n    jlists.push(classes);\r\n}\r\n\r\n/**\r\n * Returns if a block can be introuced in the day it belongs to without any issue\r\n * @param {[]} day  List of blocks of the day\r\n * @param {{}} block1 Block to be checked\r\n * @returns {boolean} Returns if the block is valid\r\n */\r\nfunction checkBlocks(day, block1) {\r\n    const [startHour1, endHour1] = [block1.Start, block1.End];\r\n\r\n    for(let i = 0; i < day.length; i++){\r\n        const block2 = day[i];\r\n        const [startHour2, endHour2] = [block2.Start, block2.End]; //Gets a block of the current day\r\n\r\n        if(!((startHour2 > endHour1) || (startHour1 > endHour2))) return false; //If not (\"block2 starts after block1 ends\" or \"block1 starts after block2 ends\"), it intersects, so return False.\r\n    }\r\n\r\n    //If we reached this point, the block is valid, therefore push to array of the day and return True\r\n    day.push(block1);\r\n    return true;\r\n}\r\n\r\nexport { generateSchedules };","import { mapJson } from '../scripts/Utilities';\r\n\r\nconst DispGroups = (states, className, setState) => (\r\n    mapJson(states[className], (groupName, index) => {\r\n        //Each class has a list of its groups\r\n        return (\r\n        <div key={index}>\r\n            <label>{groupName}</label>\r\n            <input type=\"checkbox\" onChange={evt => setState(className, groupName, evt.target.checked)} checked={states[className][groupName]} />\r\n        </div>\r\n        )\r\n    })\r\n);\r\n\r\nconst DispClasses = ({states, setState}) => (\r\n    mapJson(states, (className, index) => {\r\n        //Creates list of all classes\r\n        return (\r\n            <div key={index} className=\"schedule-checker\">\r\n                <div className=\"schedule-class\">\r\n                    <p>{className}</p>\r\n                </div>\r\n                <div className=\"schedule-groups\">\r\n                    {DispGroups(states, className, setState)}\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n);\r\n\r\nexport default DispClasses;","import SvgSchedule from '../xtra_scripts/SvgSchedule';\r\nimport DispClasses from '../xtra_scripts/DispSelectors';\r\nimport { generateSchedules } from '../xtra_scripts/GenClasses'\r\nimport { getSelectors, getSchedules, saveSchedule, sizeJson } from './Utilities';\r\nimport { useState } from 'react';\r\n\r\nconst Generate = () => {\r\n  const [selecting, isSelecting] = useState(true);\r\n  const [states, setStates] = useState(getSelectors())\r\n  const [schedules, setSchedules] = useState(getSchedules());\r\n\r\n  function setState(className, groupName, val) {\r\n    const states_ = {...states};\r\n    states_[className][groupName] = val;\r\n    setStates(states_);\r\n  }\r\n\r\n  function createSchedules() {\r\n    const schedules_ = generateSchedules(states);\r\n    saveSchedule(schedules_);\r\n    setSchedules(schedules_);\r\n    alert(\"¡Horarios generados correctamente!\");\r\n  }\r\n  return (\r\n    <>\r\n      <h1>Horarios Generados</h1>\r\n      <div className=\"schedule-container-selector\">\r\n        <div className=\"schedule-selector\">\r\n          <button onClick={() => isSelecting(true)}>Seleccionar Clases</button>\r\n        </div>\r\n        <div className=\"schedule-selector\">\r\n          <button onClick={() => isSelecting(false)}>Visualizar Horarios</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"schedule-container-visual\">\r\n        {selecting ?\r\n          ((sizeJson(states) == 0) ?\r\n            <h1 style={{textAlign:\"center\"}}>No hay bloques para mostrar</h1>\r\n            :\r\n            <DispClasses states={states} setState={setState} />\r\n          )\r\n        :\r\n        <>\r\n          {(schedules.length == 0) ?\r\n          <h1 style={{textAlign:\"center\"}}>No hay horarios para mostrar</h1>\r\n          :\r\n          <div className=\"schedule-visualizer\">\r\n            <SvgSchedule schedules={schedules} />\r\n          </div>}\r\n          <button onClick={createSchedules}>Generar Horarios</button>\r\n        </>}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Generate;","import { useState, useEffect } from 'react';\nimport Selector from './Selector';\nimport Tutorial from './scripts/Tutorial';\nimport Blocks from './scripts/Blocks';\nimport Classes from './scripts/Classes';\nimport Generate from './scripts/Generate';\n\nconst App = () => {\n  const [tab, setTab] = useState(0);\n  const [width, setWidth] = useState(window.innerWidth);\n\n  const selectors = [\n    {\n      \"text\":\"Tutorial\",\n      \"html\": <Tutorial />\n    },\n    {\n      \"text\":\"Administrar Bloques\",\n      \"html\": <Blocks />\n    },\n    {\n      \"text\":\"Visualizar Cursos\",\n      \"html\": <Classes />\n    },\n    {\n      \"text\":\"Horarios Generados\",\n      \"html\": <Generate />\n    }\n  ];\n\n  useEffect(() => {\n    function doResize() {\n      setWidth(window.innerWidth);\n    }\n\n    window.addEventListener('resize', doResize);\n\n    return () => window.removeEventListener('resize', doResize);\n  }, []);\n  return (\n    <>\n    <div className=\"selector-container\">\n      {(width < 600) ? //Arrows to change tabs\n      <>\n        <div className=\"selector-arrow-left\" onClick={() => (tab > 0) && setTab(tab - 1)}></div>\n        <Selector text={selectors[tab].text}/>\n        <div className=\"selector-arrow-right\" onClick={() => (tab < (selectors.length - 1)) && setTab(tab + 1)}></div>\n      </>\n      : //List of tabs\n      selectors.map((selector, index) => {\n        return <Selector key={index} text={selector.text} onClick={() => setTab(index)}/>\n      })\n      }\n    </div>\n    <div className=\"visual-container\">\n      {selectors[tab].html}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('schedule-app')\n);"],"sourceRoot":""}